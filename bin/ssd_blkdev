#!/bin/bash

config(){
  TOTAL_BLOCKS=256
  RESERVE_BLOCKS=16
  PAGES_PER_BLOCK=1024
  PAGE_SIZE=4096
  SECTOR_SIZE=512

  [ -f 'bin/config' ] && . bin/config

  echo "
  TOTAL_BLOCKS=$TOTAL_BLOCKS
  RESERVE_BLOCKS=$RESERVE_BLOCKS
  PAGES_PER_BLOCK=$PAGES_PER_BLOCK
  PAGE_SIZE=$PAGE_SIZE
  SECTOR_SIZE=$SECTOR_SIZE
  "

  echo "
#ifndef SSD_CONFIG_H_
#define SSD_CONFIG_H_

#define SSD_NR_BLOCKS (unsigned long) $TOTAL_BLOCKS
#define SSD_NR_RESERVE (unsigned long) $RESERVE_BLOCKS
#define SSD_NR_PAGES_PER_BLOCK (unsigned long) $PAGES_PER_BLOCK

#define SSD_PAGE_SIZE	(unsigned long) $PAGE_SIZE
#define SSD_SECTOR_SIZE	 (unsigned long) $SECTOR_SIZE
#define SSD_NR_SECTORS_PER_PAGE		(SSD_PAGE_SIZE / SSD_SECTOR_SIZE)

#define SSD_TOTAL_PAGES (SSD_NR_BLOCKS * SSD_NR_PAGES_PER_BLOCK)
#define SSD_TOTAL_SECTORS (SSD_TOTAL_PAGES * SSD_NR_SECTORS_PER_PAGE)
#define SSD_TOTAL_SIZE (SSD_TOTAL_SECTORS * SSD_SECTOR_SIZE)

#define SSD_TOTAL_EXPOSED_PAGES ((SSD_NR_BLOCKS - SSD_NR_RESERVE) * SSD_NR_PAGES_PER_BLOCK)
#define SSD_TOTAL_EXPOSED_SECTORS (SSD_TOTAL_EXPOSED_PAGES * SSD_NR_SECTORS_PER_PAGE)
#define SSD_TOTAL_EXPOSED_SIZE (SSD_TOTAL_EXPOSED_SECTORS * SSD_SECTOR_SIZE)
#endif /* SSD_CONFIG_H_ */
" > src/main/c/kernel/config.h

  echo "
SSD {
  NumberOfBlocks = $TOTAL_BLOCKS
  PagesPerBlock = $PAGES_PER_BLOCK
  PageSize = $PAGE_SIZE
  SectorSize = $SECTOR_SIZE

  ReserveBlocks = $RESERVE_BLOCKS

  PageReadDelay = 25
  PageWriteDelay = 300
  BlockEraseDelay = 2000

  CacheSize = 128
}
  " > src/main/resources/default.conf
}

get_sbt(){
  [ ! -d 'target' ] && mkdir target
  [ ! -f 'target/sbt' ] && cd target \
  && wget https://raw.githubusercontent.com/paulp/sbt-extras/master/sbt \
  && chmod 0755 sbt && cd ..
}

sbt(){
  get_sbt
  # [ -f jvm-opts ] && cmd="target/sbt -jvm-opts jvm-opts $*" || cmd="target/sbt -jvm-opts bin/jvm-opts $*"
  cmd="target/sbt $*"
  echo $cmd
  $cmd
}

run(){
    scalaDir="target/scala-2.11"
    target=$(ls -t1 ${scalaDir}/ssd_blkdev-assembly-*.jar |  head -n 1)
    testClass="${scalaDir}/test-classes"
    cmd="sudo java $(cat bin/jvm-opts) -cp ${target}:${testClass} $*"
    echo $cmd
    $cmd
}

ftl(){
  run org.janzhou.ssd_blkdev.main $*
}

insmod(){
  sudo insmod src/main/c/kernel/ssd_blkdev.ko
}

rmmod(){
  sudo rmmod ssd_blkdev
}

mkfs(){
  sudo mkfs.$1 /dev/ssd_ramdisk
}

mount(){
  sudo mount /dev/ssd_ramdisk /mnt
}

umount(){
  sudo umount /dev/ssd_ramdisk
}

clean(){
  sbt clean
  make -C src/main/c/kernel clean
}

kernel(){
  [ ! -f 'src/main/c/kernel/config.h' ] && config
  make -C src/main/c/kernel
}

build(){
  kernel
  [ ! -f 'src/main/resources/default.conf' ] && config
  sbt assembly
}

build.sbt(){
  build
}

upload(){
  scp src/main/c/kernel/ssd_blkdev.ko $1/ssd_blkdev.ko
  scalaDir="target/scala-2.11"
  target=$(ls -t1 ${scalaDir}/ssd_blkdev-assembly-*.jar |  head -n 1)
  scp $target $1/ssd_blkdev.jar
}

$*
